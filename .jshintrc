{
  // This option prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others. Bitwise operators are very rare in JavaScript programs and quite often & is simply a mistyped &&.
  "bitwise": true,

  // This option requires you to always put curly braces around blocks in loops and conditionals. JavaScript allows you to omit curly braces when the block consists of only one statement
  "curly": true,

  // This options prohibits the use of == and != in favor of === and !==. The former try to coerce values before comparing them which can lead to some unexpected results. The latter don't do any coercion so they are generally safer.
  "eqeqeq": true,

  // This option requires all for in loops to filter object's items. The for in statement allows for looping through the names of all of the properties of an object including those inherited through the prototype chain.
  "forin": true,

  // This option prohibits the use of a variable before it was defined. JavaScript has function scope only and, in addition to that, all variables are always moved—or hoisted— to the top of the function.
  "latedef": true,

  // This option prohibits the use of arguments.caller and arguments.callee. Both .caller and .callee make quite a few optimizations impossible so they were deprecated in future versions of JavaScript.
  "noarg": true,

  // This option prohibits the use of constructor functions for side-effects. Some people like to call constructor functions without assigning its result to any variable
  "nonew": true,

  // This option suppresses warnings about invalid typeof operator values. This operator has only a limited set of possible return values. By default, JSHint warns when you compare its result with an invalid value which often can be a typo.
  "notypeof": true,

  // This option requires the code to run in ECMAScript 5's strict mode. Strict mode is a way to opt in to a restricted variant of JavaScript.
  "strict": true,

  // This option prohibits the use of explicitly undeclared variables. This option is very useful for spotting leaking and mistyped variables.
  "undef": true,

  // This option warns when you define and never use your variables. It is very useful for general code cleanup, especially when used in addition to undef.
  "unused": true,

  // This option defines globals exposed by modern browsers: all the way from good old document and navigator to the HTML5 FileReader and other new developments in the browser world.
  "browser": true,

  // This option can be used to specify a white list of global variables that are not formally defined in the source code. This is most useful when combined with the undef option in order to suppress warnings for project-specific global variables.
  // Setting an entry to true enables reading and writing to that variable. Setting it to false will trigger JSHint to consider that variable read-only.
  "globals": {
    "$": false, // read only
    "THREE": false,
    "myApp": true // read and write
  },

  // This option allows you to control which variables JSHint considers to be implicitly defined in the environment. Configure it with an array of string values. Prefixing a variable name with a hyphen (-) character will remove that name from the collection of predefined variables.
  // JSHint will consider variables declared in this way to be read-only.
  "predef": [
    "$",
    "jQuery"
  ]
}